from bs4 import BeautifulSoup
import requests

def parse_flat_info():
    url = "https://inberlinwohnen.de/wohnungsfinder/"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Language": "de,en;q=0.9",
        "Connection": "keep-alive",
    }

    response = requests.get(url, headers=headers)
    html = response.text  # –≤–æ—Ç —ç—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ BeautifulSoup

    soup = BeautifulSoup(html, "html.parser")
    flats = []

    for li in soup.select("li.tb-merkflat"):
        flat_id = None
        address = None
        area = None
        rooms = None
        detail_url = None

        # ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ id="flat_1273643"
        flat_id_attr = li.get("id", "")
        if flat_id_attr.startswith("flat_"):
            flat_id = flat_id_attr.replace("flat_", "").strip()

        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
        link_tag = li.find("a", class_="org-but", href=True)
        if link_tag:
            detail_url = 'https://inberlinwohnen.de'+link_tag["href"].strip()


        # –ê–¥—Ä–µ—Å: –∏—â–µ–º <th>Adresse:</th> ‚Üí –±–ª–∏–∂–∞–π—à–∏–π <td>
        address_row = li.find("th", string="Adresse: ")
        if address_row:
            address = address_row.find_next_sibling("td").get_text(strip=True)

        # –ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç: <th>Zimmeranzahl:</th>
        rooms_row = li.find("th", string="Zimmeranzahl: ")
        if rooms_row:
            rooms = rooms_row.find_next_sibling("td").get_text(strip=True)
            try:
                rooms_value = float(rooms.replace(",", "."))
                if rooms_value < 3:
                    continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å < 3 –∫–æ–º–Ω–∞—Ç–∞–º–∏
                rooms = rooms_value
            except ValueError:
                continue  # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ

        # –ü–ª–æ—â–∞–¥—å: <th>Wohnfl√§che:</th>
        area_row = li.find("th", string="Wohnfl√§che: ")
        if area_row:
            area = area_row.find_next_sibling("td").get_text(strip=True)

        flats.append({
           "id": flat_id,
            "address": address,
            "rooms": rooms,
            "area": area,
            "url": detail_url
        })

    return flats


from telegram import Bot

TELEGRAM_TOKEN = '8198318307:AAHB4T4za1rrCXToh92i0IV7oFf-OVIk1C4'
CHAT_ID = '-4736861986'  # –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä—É–∫–∞–º–∏

bot = Bot(token=TELEGRAM_TOKEN)

import asyncio
async def send_to_telegram(flat):
    message = (
        f"üè† *{flat['rooms']} Zimmer* ‚Äì *{flat['area']}*\n"
        f"üìç {flat['address']}\n"
        f"[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({flat['url']})"
    )
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='Markdown', disable_web_page_preview=False)



import json
import os

SEEN_FILE = "seen.json"

def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r") as f:
            return set(json.load(f))
    return set()

def save_seen(seen_ids):
    with open(SEEN_FILE, "w") as f:
        json.dump(list(seen_ids), f)


async def main():
    seen = load_seen()
    new_seen = set(seen)

    flats = parse_flat_info()
    for flat in flats:
        if flat["id"] not in seen:
            await send_to_telegram(flat)
            await asyncio.sleep(5)  # ‚è± –ø–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
            new_seen.add(flat["id"])

    save_seen(new_seen)

# === 5. –ó–∞–ø—É—Å–∫ ===
import asyncio
if __name__ == "__main__":
    asyncio.run(main())
