import json
import os
import requests
import asyncio
import logging
from datetime import datetime
from bs4 import BeautifulSoup
from telegram import Bot
import time
import sys
import traceback
import random
from fake_useragent import UserAgent
ua = UserAgent()

# === Telegram config ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω")
CHAT_ID = os.getenv("CHAT_ID", "—Ç–≤–æ–π_chat_id")
bot = Bot(token=TELEGRAM_TOKEN)

# === –ü—É—Ç–∏ –¥–ª—è Volume ===
os.makedirs("/data", exist_ok=True)
LOG_FILE = "/data/flat_parser.log"
SEEN_FILE = "/data/seen.json"

# === Logging (–∏ –≤ —Ñ–∞–π–ª, –∏ –≤ stdout –¥–ª—è Railway) ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler(sys.stdout)
    ]
)

# === 1. –ü–∞—Ä—Å–∏–Ω–≥ –∫–≤–∞—Ä—Ç–∏—Ä—ã ===
def parse_flat_info(session):
    url = "https://inberlinwohnen.de/wohnungsfinder/"
    USER_AGENTS = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114 Safari/537.36",
        "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:114.0) Gecko/20100101 Firefox/114.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_3_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15",
    ]

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–º–∏
    headers = {
        "User-Agent": ua.random,
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Language": "de-DE,de;q=0.8,en-US;q=0.5,en;q=0.3",
        "Accept-Encoding": "gzip, deflate, br",
        "Connection": "keep-alive",
        "Upgrade-Insecure-Requests": "1",
        "Sec-Fetch-Dest": "document",
        "Sec-Fetch-Mode": "navigate",
        "Sec-Fetch-Site": "none",
        "Sec-Fetch-User": "?1",
        "TE": "trailers"
    }


    for attempt in range(3):
        try:
            time.sleep(random.uniform(2, 5))
            response = session.get(url, headers=headers, timeout=20)
            response.raise_for_status()
            break
        except requests.RequestException as e:
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            logging.warning(traceback.format_exc())
    else:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫.")
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    flats = []

    for li in soup.select("li.tb-merkflat"):
        flat_id = None
        address = None
        area = None
        rooms = None
        detail_url = None

        flat_id_attr = li.get("id", "")
        if flat_id_attr.startswith("flat_"):
            flat_id = flat_id_attr.replace("flat_", "").strip()

        link_tag = li.find("a", class_="org-but", href=True)
        if link_tag:
            detail_url = 'https://inberlinwohnen.de' + link_tag["href"].strip()

        address_row = li.find("th", string="Adresse: ")
        if address_row:
            address = address_row.find_next_sibling("td").get_text(strip=True)

        rooms_row = li.find("th", string="Zimmeranzahl: ")
        if rooms_row:
            rooms_text = rooms_row.find_next_sibling("td").get_text(strip=True)
            try:
                rooms_value = float(rooms_text.replace(",", "."))
                if rooms_value < 3:
                    continue
                rooms = rooms_text
            except ValueError:
                continue

        area_row = li.find("th", string="Wohnfl√§che: ")
        if area_row:
            area = area_row.find_next_sibling("td").get_text(strip=True)

        flats.append({
            "id": flat_id,
            "address": address,
            "rooms": rooms,
            "area": area,
            "url": detail_url
        })

    return flats

# === 2. –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º seen.json —á–µ—Ä–µ–∑ Volume ===
def load_seen():
    if os.path.exists(SEEN_FILE):
        try:
            with open(SEEN_FILE, "r") as f:
                return set(json.load(f))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ seen.json: {e}")
    return set()

def save_seen(seen_ids):
    try:
        with open(SEEN_FILE, "w") as f:
            json.dump(list(seen_ids), f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è seen.json: {e}")

# === 3. Async Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ ===
async def send_to_telegram(flat):
    message = (
        f"\U0001F3E0 *{flat['rooms']} Zimmer* ‚Äì *{flat['area']}*\n"
        f"\U0001F4CD {flat['address']}\n"
        f"[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({flat['url']})"
    )
    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text=message,
            parse_mode='Markdown',
            disable_web_page_preview=False
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")

# === 4. –û—Å–Ω–æ–≤–Ω–æ–π async-—Ü–∏–∫–ª ===
async def main():
    logging.info("‚ñ∂Ô∏è –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ Railway")
    while True:
        with requests.Session() as session:
            logging.info("\U0001F50D –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
            try:
                seen = load_seen()
                new_seen = set(seen)
    
                flats = parse_flat_info(session)
                new_count = 0
    
                for flat in flats:
                    if flat["id"] not in seen:
                      #  await send_to_telegram(flat)
                        await asyncio.sleep(1)
                        new_seen.add(flat["id"])
                        new_count += 1
    
                save_seen(new_seen)
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {new_count}")
    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    
        await asyncio.sleep(600)



# === 5. –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logging.info("üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    try:
        asyncio.run(main())
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        import time
        time.sleep(120)  # –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∂–∏–≤—ã–º 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
